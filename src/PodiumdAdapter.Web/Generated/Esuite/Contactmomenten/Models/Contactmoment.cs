// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Generated.Esuite.ContactmomentenClient.Models {
    public class Contactmoment : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Antwoord uit Contact in e-Suite. Een Contactmoment met status &apos;afgehandeld&apos; moet een antwoord bevatten.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Antwoord { get; set; }
#nullable restore
#else
        public string Antwoord { get; set; }
#endif
        /// <summary>Het RSIN van de gemeeente.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Bronorganisatie { get; private set; }
#nullable restore
#else
        public string Bronorganisatie { get; private set; }
#endif
        /// <summary>Functionele identificatie van Contact in e-Suite</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Identificatie { get; private set; }
#nullable restore
#else
        public string Identificatie { get; private set; }
#endif
        /// <summary>Kanaal van Contact in e-Suite</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Kanaal { get; set; }
#nullable restore
#else
        public string Kanaal { get; set; }
#endif
        /// <summary>Behandelaar van Contact in e-Suite</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Medewerker? MedewerkerIdentificatie { get; set; }
#nullable restore
#else
        public Medewerker MedewerkerIdentificatie { get; set; }
#endif
        /// <summary>Bij een POST: Naam van afdeling, of anders groep, waaraan Contact in e-Suite wordt toegekend. Indien waarde wordt voorafgegaan door &apos;afd:&apos; dan wordt de waarde na deze prefix beschouwd als naam van een afdeling. Indien waarde wordt voorafgegaan door &apos;grp:&apos; dan wordt de waarde na deze prefix beschouwd als naam van een groep. Bij een GET: Naam van een afdeling voorafgegaand door &apos;afd:&apos; of naam van een groep voorafgegaan door &apos;grp:&apos; waaraan Contact in e-Suite is toegekend.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Onderwerp { get; set; }
#nullable restore
#else
        public string Onderwerp { get; set; }
#endif
        /// <summary>Startdatum van Contact in e-Suite</summary>
        public DateTimeOffset? Registratiedatum { get; set; }
        /// <summary>Contact status type in e-Suite</summary>
        public Contactmoment_status? Status { get; set; }
        /// <summary>Vraag uit Contact in e-Suite</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Tekst { get; set; }
#nullable restore
#else
        public string Tekst { get; set; }
#endif
        /// <summary>Naam van het type van Contact in e-Suite</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>URL-referentie naar dit object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; private set; }
#nullable restore
#else
        public string Url { get; private set; }
#endif
        /// <summary>
        /// Instantiates a new Contactmoment and sets the default values.
        /// </summary>
        public Contactmoment() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Contactmoment CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Contactmoment();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"antwoord", n => { Antwoord = n.GetStringValue(); } },
                {"bronorganisatie", n => { Bronorganisatie = n.GetStringValue(); } },
                {"identificatie", n => { Identificatie = n.GetStringValue(); } },
                {"kanaal", n => { Kanaal = n.GetStringValue(); } },
                {"medewerkerIdentificatie", n => { MedewerkerIdentificatie = n.GetObjectValue<Medewerker>(Medewerker.CreateFromDiscriminatorValue); } },
                {"onderwerp", n => { Onderwerp = n.GetStringValue(); } },
                {"registratiedatum", n => { Registratiedatum = n.GetDateTimeOffsetValue(); } },
                {"status", n => { Status = n.GetEnumValue<Contactmoment_status>(); } },
                {"tekst", n => { Tekst = n.GetStringValue(); } },
                {"type", n => { Type = n.GetStringValue(); } },
                {"url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("antwoord", Antwoord);
            writer.WriteStringValue("kanaal", Kanaal);
            writer.WriteObjectValue<Medewerker>("medewerkerIdentificatie", MedewerkerIdentificatie);
            writer.WriteStringValue("onderwerp", Onderwerp);
            writer.WriteDateTimeOffsetValue("registratiedatum", Registratiedatum);
            writer.WriteEnumValue<Contactmoment_status>("status", Status);
            writer.WriteStringValue("tekst", Tekst);
            writer.WriteStringValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
