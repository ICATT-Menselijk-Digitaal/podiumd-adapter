// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Generated.Esuite.ContactmomentenClient.Models {
    /// <summary>
    /// Behandelaar van Contact in e-Suite
    /// </summary>
    public class Medewerker : IAdditionalDataHolder, IParsable {
        /// <summary>Volledige naam van medewerker in e-Suite.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Achternaam { get; set; }
#nullable restore
#else
        public string Achternaam { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Gebruikersnaam van medewerker in e-Suite.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Identificatie { get; set; }
#nullable restore
#else
        public string Identificatie { get; set; }
#endif
        /// <summary>
        /// Instantiates a new Medewerker and sets the default values.
        /// </summary>
        public Medewerker() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Medewerker CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Medewerker();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"achternaam", n => { Achternaam = n.GetStringValue(); } },
                {"identificatie", n => { Identificatie = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("achternaam", Achternaam);
            writer.WriteStringValue("identificatie", Identificatie);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
