// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Generated.Esuite.ContactmomentenClient.Models {
    public class Klantcontactmoment : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>URL-referentie naar het Contactmoment</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Contactmoment { get; set; }
#nullable restore
#else
        public string Contactmoment { get; set; }
#endif
        /// <summary>URL-referentie naar de Klant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Klant { get; set; }
#nullable restore
#else
        public string Klant { get; set; }
#endif
        /// <summary>Rol van de klant in het contactmoment. Binnen e-Suite wordt deze informatie niet opgeslagen. Bij lezen wordt altijd &apos;gesprekspartner&apos; geretournerd. Bij schrijven wordt de meegegeven waarde genegeerd</summary>
        public Klantcontactmoment_rol? Rol { get; private set; }
        /// <summary>URL-referentie naar dit object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; private set; }
#nullable restore
#else
        public string Url { get; private set; }
#endif
        /// <summary>
        /// Instantiates a new Klantcontactmoment and sets the default values.
        /// </summary>
        public Klantcontactmoment() {
            AdditionalData = new Dictionary<string, object>();
            Rol = Klantcontactmoment_rol.Gesprekspartner;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Klantcontactmoment CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Klantcontactmoment();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"contactmoment", n => { Contactmoment = n.GetStringValue(); } },
                {"klant", n => { Klant = n.GetStringValue(); } },
                {"rol", n => { Rol = n.GetEnumValue<Klantcontactmoment_rol>(); } },
                {"url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("contactmoment", Contactmoment);
            writer.WriteStringValue("klant", Klant);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
