// <auto-generated/>
using Generated.Esuite.ZtcClient.Besluittypen;
using Generated.Esuite.ZtcClient.Catalogussen;
using Generated.Esuite.ZtcClient.Eigenschappen;
using Generated.Esuite.ZtcClient.Informatieobjecttypen;
using Generated.Esuite.ZtcClient.Resultaattypen;
using Generated.Esuite.ZtcClient.Roltypen;
using Generated.Esuite.ZtcClient.Statustypen;
using Generated.Esuite.ZtcClient.Zaaktypen;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;
namespace Generated.Esuite.ZtcClient {
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    public class ZtcClient : BaseRequestBuilder {
        /// <summary>The besluittypen property</summary>
        public BesluittypenRequestBuilder Besluittypen { get =>
            new BesluittypenRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The catalogussen property</summary>
        public CatalogussenRequestBuilder Catalogussen { get =>
            new CatalogussenRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The eigenschappen property</summary>
        public EigenschappenRequestBuilder Eigenschappen { get =>
            new EigenschappenRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The informatieobjecttypen property</summary>
        public InformatieobjecttypenRequestBuilder Informatieobjecttypen { get =>
            new InformatieobjecttypenRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The resultaattypen property</summary>
        public ResultaattypenRequestBuilder Resultaattypen { get =>
            new ResultaattypenRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The roltypen property</summary>
        public RoltypenRequestBuilder Roltypen { get =>
            new RoltypenRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The statustypen property</summary>
        public StatustypenRequestBuilder Statustypen { get =>
            new StatustypenRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The zaaktypen property</summary>
        public ZaaktypenRequestBuilder Zaaktypen { get =>
            new ZaaktypenRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new ZtcClient and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ZtcClient(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>()) {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl)) {
                RequestAdapter.BaseUrl = "/api/v1";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
    }
}
