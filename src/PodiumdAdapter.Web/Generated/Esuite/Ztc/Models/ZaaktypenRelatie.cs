// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Generated.Esuite.ZtcClient.Models {
    public class ZaaktypenRelatie : IAdditionalDataHolder, IParsable {
        /// <summary>In e-Suite is Aard relatie niet bekend. Deze waarde is dus altijd &apos;null&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AardRelatie { get; set; }
#nullable restore
#else
        public string AardRelatie { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>URL referentie naar het gerelateerde zaaktype</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Zaaktype { get; set; }
#nullable restore
#else
        public string Zaaktype { get; set; }
#endif
        /// <summary>
        /// Instantiates a new ZaaktypenRelatie and sets the default values.
        /// </summary>
        public ZaaktypenRelatie() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ZaaktypenRelatie CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ZaaktypenRelatie();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"aardRelatie", n => { AardRelatie = n.GetStringValue(); } },
                {"zaaktype", n => { Zaaktype = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("aardRelatie", AardRelatie);
            writer.WriteStringValue("zaaktype", Zaaktype);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
