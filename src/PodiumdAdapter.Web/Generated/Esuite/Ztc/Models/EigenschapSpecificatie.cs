// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Generated.Esuite.ZtcClient.Models {
    public class EigenschapSpecificatie : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Soort tekens waarmee waarden van de EIGENSCHAP kunnen worden vastgelegd.</summary>
        public EigenschapSpecificatie_formaat? Formaat { get; set; }
        /// <summary>Aantal mogelijke voorkomens van waarden van deze eigenschap bij een zaak van het zaaktype.</summary>
        public int? Kardinaliteit { get; set; }
        /// <summary>Maximaal aantal karakters (lengte) waarmee waarden van de eigenschap worden vastgelegd.</summary>
        public int? Lengte { get; set; }
        /// <summary>Waarden die deze eigenschap kan hebben.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Waardenverzameling { get; set; }
#nullable restore
#else
        public List<string> Waardenverzameling { get; set; }
#endif
        /// <summary>
        /// Instantiates a new EigenschapSpecificatie and sets the default values.
        /// </summary>
        public EigenschapSpecificatie() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static EigenschapSpecificatie CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new EigenschapSpecificatie();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"formaat", n => { Formaat = n.GetEnumValue<EigenschapSpecificatie_formaat>(); } },
                {"kardinaliteit", n => { Kardinaliteit = n.GetIntValue(); } },
                {"lengte", n => { Lengte = n.GetIntValue(); } },
                {"waardenverzameling", n => { Waardenverzameling = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<EigenschapSpecificatie_formaat>("formaat", Formaat);
            writer.WriteIntValue("kardinaliteit", Kardinaliteit);
            writer.WriteIntValue("lengte", Lengte);
            writer.WriteCollectionOfPrimitiveValues<string>("waardenverzameling", Waardenverzameling);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
