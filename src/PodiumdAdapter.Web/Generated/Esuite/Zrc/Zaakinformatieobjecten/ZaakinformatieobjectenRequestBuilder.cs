// <auto-generated/>
using Generated.Esuite.ZrcClient.Models;
using Generated.Esuite.ZrcClient.Zaakinformatieobjecten.Item;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Generated.Esuite.ZrcClient.Zaakinformatieobjecten {
    /// <summary>
    /// Builds and executes requests for operations under \zaakinformatieobjecten
    /// </summary>
    public class ZaakinformatieobjectenRequestBuilder : BaseRequestBuilder {
        /// <summary>Gets an item from the Generated.Esuite.ZrcClient.zaakinformatieobjecten.item collection</summary>
        /// <param name="position">Unieke resource identifier (UUID4)</param>
        public WithUuItemRequestBuilder this[Guid position] { get {
            var urlTplParams = new Dictionary<string, object>(PathParameters);
            urlTplParams.Add("uuid", position);
            return new WithUuItemRequestBuilder(urlTplParams, RequestAdapter);
        } }
        /// <summary>Gets an item from the Generated.Esuite.ZrcClient.zaakinformatieobjecten.item collection</summary>
        /// <param name="position">Unieke resource identifier (UUID4)</param>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public WithUuItemRequestBuilder this[string position] { get {
            var urlTplParams = new Dictionary<string, object>(PathParameters);
            if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("uuid", position);
            return new WithUuItemRequestBuilder(urlTplParams, RequestAdapter);
        } }
        /// <summary>
        /// Instantiates a new ZaakinformatieobjectenRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ZaakinformatieobjectenRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/zaakinformatieobjecten{?zaak*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new ZaakinformatieobjectenRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ZaakinformatieobjectenRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/zaakinformatieobjecten{?zaak*}", rawUrl) {
        }
        /// <summary>
        /// Deze lijst moet worden gefilterd met de url referentie naar een zaak
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<ZaakInformatieobject>?> GetAsync(Action<RequestConfiguration<ZaakinformatieobjectenRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<List<ZaakInformatieobject>> GetAsync(Action<RequestConfiguration<ZaakinformatieobjectenRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"400", ValidatieFout.CreateFromDiscriminatorValue},
                {"401", Fout.CreateFromDiscriminatorValue},
                {"403", Fout.CreateFromDiscriminatorValue},
                {"404", Fout.CreateFromDiscriminatorValue},
                {"500", Fout.CreateFromDiscriminatorValue},
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<ZaakInformatieobject>(requestInfo, ZaakInformatieobject.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.ToList();
        }
        /// <summary>
        /// Koppel een nieuw aangemaakt enkelvoudigInformatieobject (inbox document) aan een zaak. Het inbox document wordt daarbij omgezet naar een zaak document waardoor het aangemaakte enkelvoudigInformatieobject niet nogmaals aan een zaak gekoppeld kan worden.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<ZaakInformatieobject?> PostAsync(ZaakInformatieobject body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<ZaakInformatieobject> PostAsync(ZaakInformatieobject body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"400", ValidatieFout.CreateFromDiscriminatorValue},
                {"401", Fout.CreateFromDiscriminatorValue},
                {"403", Fout.CreateFromDiscriminatorValue},
                {"500", Fout.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<ZaakInformatieobject>(requestInfo, ZaakInformatieobject.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Deze lijst moet worden gefilterd met de url referentie naar een zaak
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<ZaakinformatieobjectenRequestBuilderGetQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<ZaakinformatieobjectenRequestBuilderGetQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Koppel een nieuw aangemaakt enkelvoudigInformatieobject (inbox document) aan een zaak. Het inbox document wordt daarbij omgezet naar een zaak document waardoor het aangemaakte enkelvoudigInformatieobject niet nogmaals aan een zaak gekoppeld kan worden.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(ZaakInformatieobject body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(ZaakInformatieobject body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default) {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public ZaakinformatieobjectenRequestBuilder WithUrl(string rawUrl) {
            return new ZaakinformatieobjectenRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Deze lijst moet worden gefilterd met de url referentie naar een zaak
        /// </summary>
        public class ZaakinformatieobjectenRequestBuilderGetQueryParameters {
            /// <summary>URL-referentie naar een zaak</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("zaak")]
            public string? Zaak { get; set; }
#nullable restore
#else
            [QueryParameter("zaak")]
            public string Zaak { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class ZaakinformatieobjectenRequestBuilderGetRequestConfiguration : RequestConfiguration<ZaakinformatieobjectenRequestBuilderGetQueryParameters> {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class ZaakinformatieobjectenRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters> {
        }
    }
}
